{"version":3,"sources":["redux/todos/todos-actions.js","components/TodosForm/TodosForm.styled.jsx","components/SelectButton/SelectButton.styled.jsx","components/SelectButton/SelectButton.jsx","utils/todos-selectors.js","components/TodosForm/TodosForm.jsx","components/TodoList/TodoItem/TodoItem.styled.jsx","components/TodoList/TodoItem/TodoItem.jsx","components/TodoList/TodoList.styled.jsx","components/TodoList/TodoList.jsx","components/App/App.styled.jsx","components/App/App.jsx","redux/todos/todos-reducer.js","redux/store.js","index.js"],"names":["addTodo","createAction","todo","payload","id","shortid","generate","completed","deleteTodo","updateFilterStatus","toggleCompleted","updateTodo","value","console","log","Title","styled","h1","InputField","input","Button","button","Container","div","ButtonSel","select","SelectButton","children","rest","getTodos","state","todos","items","getFilterStatus","filterStatus","TodosForm","dispatch","useDispatch","useState","setTodo","useSelector","type","placeholder","onChange","e","target","handleChange","onClick","todosActions","alert","ButtonDel","ButtonSave","CheckBox","ItemWrapper","TextTodo","p","Area","textarea","Todo","onToggleCompleted","onDelete","edit","setEdit","setValue","update","checked","editTodo","List","ul","Item","li","TodoList","filteredTodoList","filter","item","map","TodosActions","onDeleteTodo","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","todosReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccefc6cb.chunk.js","sourcesContent":["import shortid from \"shortid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// const addTodo = (todo) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     todo,\r\n//     completed: false,\r\n//   },\r\n// });\r\nconst addTodo = createAction(\"todos/add\", (todo) => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      todo,\r\n      completed: false,\r\n    },\r\n  };\r\n});\r\n\r\n// const deleteTodo = todoId => ({\r\n//     type: types.DELETE,\r\n//     payload: todoId\r\n\r\n// })\r\nconst deleteTodo = createAction(\"todos/delete\");\r\n\r\n// const  changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value\r\n// })\r\n\r\n// const changeFilter = createAction(\"todos/changeFilter\");\r\n\r\nconst updateFilterStatus = createAction(\"todos/updateFilterStatus\");\r\n\r\nconst toggleCompleted = createAction(\"todos/toggleCompleted\");\r\nconst updateTodo = createAction(\"todos/update\", (id, value) => {\r\n  console.log(id);\r\n  console.log(value);\r\n\r\n  return {\r\n    payload: {\r\n      id: id,\r\n      todo: value,\r\n    },\r\n  };\r\n});\r\n\r\nexport default {\r\n  addTodo,\r\n  deleteTodo,\r\n  updateFilterStatus,\r\n  toggleCompleted,\r\n  updateTodo,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Title = styled.h1`\r\n  text-transform: uppercase;\r\n  color: #585858;\r\n  font-size: 56px;\r\n`;\r\nexport const InputField = styled.input`\r\n  width: 500px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  border: 2px solid #000;\r\n`;\r\nexport const Button = styled.button`\r\n  background-color: #0075ff;\r\n  font-family: \"Roboto\";\r\n  margin-left: 15px;\r\n  border-radius: 10px;\r\n  padding: 15px 37px;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  border: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n`;\r\nexport const Container = styled.div`\r\n  margin: 0 auto;\r\n  width: 1200px;\r\n  margin-bottom: 20px;\r\n`;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const ButtonSel = styled.select`\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-weight: 500;\r\n  font-family: \"Roboto\";\r\n  text-decoration: none;\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  color: #585858;\r\n  padding: 14px 28px;\r\n  border: none;\r\n  background-color: #cccdde;\r\n  width: 150px;\r\n  margin-left: 15px;\r\n`;\r\n","import React from \"react\";\r\nimport { ButtonSel } from \"./SelectButton.styled\";\r\n\r\nconst SelectButton = ({ children, id, ...rest }) => {\r\n  return (\r\n    <ButtonSel id={id} {...rest}>\r\n      {children}\r\n    </ButtonSel>\r\n  );\r\n};\r\nexport default SelectButton;\r\n","export const getTodos = (state) => state.todos.items;\r\nexport const getFilterStatus = state=> state.todos.filterStatus;\r\n\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport todosActions from \"../../redux/todos/todos-actions\";\r\nimport { Title, InputField, Button, Container } from \"./TodosForm.styled\";\r\nimport SelectButton from \"../SelectButton/SelectButton\";\r\nimport { getFilterStatus } from \"../../utils/todos-selectors\";\r\n\r\nconst TodosForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [todo, setTodo] = useState(\"\");\r\n  const filterStatus = useSelector(getFilterStatus);\r\n\r\n  const updateFilter = (e) => {\r\n    dispatch(todosActions.updateFilterStatus(e.target.value));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setTodo(e.target.value);\r\n  };\r\n\r\n  const add = () => {\r\n    if (todo === \"\") {\r\n      alert(\"Add text your todo\");\r\n      return;\r\n    }\r\n    dispatch(todosActions.addTodo(todo));\r\n    setTodo(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Title>My ToDo App</Title>\r\n      <Container>\r\n        <InputField\r\n          type=\"text\"\r\n          placeholder=\"add your todos\"\r\n          onChange={(e) => handleChange(e)}\r\n          value={todo}\r\n        />\r\n        <Button onClick={() => add()}>Add todo</Button>\r\n        <SelectButton id=\"status\" value={filterStatus} onChange={updateFilter}>\r\n          <option value=\"all\">All</option>\r\n          <option value=\"incomplete\">Incomplete</option>\r\n          <option value=\"completed\">Completed</option>\r\n        </SelectButton>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodosForm;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  border: 1px solid #2a2a2a;\r\n  border-radius: 4px;\r\n`;\r\nexport const Button = styled.button`\r\n  background-color: #585858;\r\n  position: absolute;\r\n  right: 100px;\r\n  border-radius: 5px;\r\n  padding: 7px 14px;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  border: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n`;\r\nexport const ButtonDel = styled.button`\r\n  background-color: #585858;\r\n  position: absolute;\r\n  right: 15px;\r\n  border-radius: 5px;\r\n  padding: 7px 14px;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  border: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n`;\r\nexport const ButtonSave = styled.button`\r\n  background-color: #585858;\r\n  position: absolute;\r\n  right: -92px;\r\n  border-radius: 5px;\r\n  padding: 7px 14px;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  border: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n`;\r\nexport const CheckBox = styled.input`\r\n  font-family: inherit;\r\n  font-size: 100%;\r\n  line-height: 1.15;\r\n  margin: 0;\r\n  cursor: pointer;\r\n  width: 30px;\r\n  height: 30px;\r\n`;\r\nexport const ItemWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  border-radius: 4px;\r\n  background-color: #cccdde;\r\n  width: 530px;\r\n`;\r\nexport const TextTodo = styled.p`\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  margin-right: 24px;\r\n  margin-left: 24px;\r\n`;\r\nexport const Area = styled.textarea`\r\n  width: 420px;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport todosActions from \"../../../redux/todos/todos-actions\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  CheckBox,\r\n  ItemWrapper,\r\n  TextTodo,\r\n  ButtonDel,\r\n  ButtonSave,\r\n  Area,\r\n} from \"./TodoItem.styled\";\r\n\r\nconst Todo = ({\r\n  todo,\r\n  id,\r\n  completed,\r\n  onToggleCompleted,\r\n  onDelete,\r\n}) => {\r\n  const [edit, setEdit] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const editTodo = (todo) => {\r\n    setEdit(true);\r\n    setValue(todo);\r\n  };\r\n\r\n  const update = (id, value) => {\r\n    dispatch(todosActions.updateTodo(id, value));\r\n    setEdit(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {edit ? (\r\n        <Container>\r\n          <Area value={value} onChange={(e) => setValue(e.target.value)} />\r\n          <ButtonSave onClick={() => update(id, value)}>Save</ButtonSave>\r\n        </Container>\r\n      ) : (\r\n        <ItemWrapper>\r\n          <CheckBox\r\n            type=\"checkbox\"\r\n            checked={completed}\r\n            onChange={onToggleCompleted}\r\n          />\r\n          <TextTodo>{todo}</TextTodo>\r\n          <Button type=\"button\" onClick={() => editTodo(todo)}>\r\n            Edit\r\n          </Button>\r\n          <ButtonDel type=\"button\" onClick={onDelete}>\r\n            Delete\r\n          </ButtonDel>\r\n        </ItemWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Todo;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  display: grid;\r\n  justify-content: center;\r\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n  grid-gap: 24px;\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style: none;\r\n`;\r\nexport const Item = styled.li`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  border: 1px solid #2a2a2a;\r\n  border-radius: 4px;\r\n  background-color: #cccdde;\r\n`;\r\n","import Todo from \"./TodoItem/TodoItem\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport TodosActions from \"../../redux/todos/todos-actions\";\r\nimport { List, Item } from \"./TodoList.styled\";\r\nimport { getTodos, getFilterStatus } from \"../../utils/todos-selectors\";\r\n\r\nconst TodoList = () => {\r\n  const todos = useSelector(getTodos);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteTodo = (id) => dispatch(TodosActions.deleteTodo(id));\r\n  const toggleCompleted = (id) => dispatch(TodosActions.toggleCompleted(id));\r\n\r\n  const filterStatus = useSelector(getFilterStatus);\r\n\r\n  const filteredTodoList = todos.filter((item) => {\r\n    if (filterStatus === \"all\") {\r\n      return true;\r\n    }\r\n    if (filterStatus === \"completed\") {\r\n      return item.completed;\r\n    } else {\r\n      return item.completed === false;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <List>\r\n      {filteredTodoList.map(({ id, todo, completed }) => (\r\n        <Item key={id}>\r\n          <Todo\r\n            id={id}\r\n            todo={todo}\r\n            completed={completed}\r\n            onToggleCompleted={() => toggleCompleted(id)}\r\n            onDelete={() => onDeleteTodo(id)}\r\n          />\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  margin: 0 auto;\r\n  width: 1200px;\r\n  text-align: center;\r\n\r\n`;\r\n","import TodosForm from \"../TodosForm/TodosForm\";\r\nimport TodoList from \"../TodoList/TodoList\";\r\nimport {Container} from './App.styled'\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Container>\r\n      <TodosForm />\r\n      <TodoList />  \r\n    </Container>\r\n  );\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"../todos/todos-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addTodo]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteTodo]: (state, { payload }) =>\r\n    state.filter((todo) => todo.id !== payload),\r\n  [actions.toggleCompleted]: (state, { payload }) =>\r\n    state.map((todo) =>\r\n      todo.id === payload ? { ...todo, completed: !todo.completed } : todo\r\n    ),\r\n  [actions.updateTodo]: (state, { payload }) =>\r\n    // console.log(payload)\r\n\r\n    state.map((todo) =>\r\n      todo.id === payload.id ? { ...todo, todo: payload.todo } : todo\r\n    ),\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter((todo) => todo.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterStatus = createReducer(\"all\", {\r\n  [actions.updateFilterStatus]: (_, { payload }) => payload,\r\n});\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filterStatus,\r\n});\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport todosReducer from './todos/todos-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware(),  logger]\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        todos: todosReducer\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./components/App/App\";\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}